import{S as Tn,i as Pn,s as Cn,k as o,q as e,a as x,l as c,m as l,h as s,r as p,c as y,n as k,b as r,X as a,U as ln}from"./index.f02f8fef.js";function qn(_n){let f,h,b,R,H,v,X,J,E,U,M,j,z,N,d,m,T,B,O,_,G,L,i,K,P,Q,V,C,W,Y,q,Z,$,I,nn,sn,S,an,tn,D,en,pn,A,g,on,F,w,gn=`<code class="language-turtle"><span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/conn/js#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">fno<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/function/ontology#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">fnom<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/function/vocabulary/mapping#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>http://www.w3.org/2001/XMLSchema#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>http://www.w3.org/ns/shacl#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix"><span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/conn#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>


<span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">JsProcess</span></span> <span class="token keyword">a</span> <span class="token function"><span class="token prefix"><span class="token punctuation">:</span></span><span class="token local-name">ProcessClass</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix"><span class="token punctuation">:</span></span><span class="token local-name">supportsChannel</span></span> <span class="token function"><span class="token prefix"><span class="token punctuation">:</span></span><span class="token local-name">HttpChannel</span></span><span class="token punctuation">,</span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">JsChannel.</span></span> <span class="token comment"># and more</span>

<span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">JsProcessorShape</span></span> <span class="token keyword">a</span> <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">NodeShape</span></span><span class="token punctuation">;</span>      <span class="token comment"># Shacl shape for validation</span>
  <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">targetClass</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">JsProcess</span></span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">property</span></span> <span class="token punctuation">[</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">dataType</span></span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span><span class="token local-name">string</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">path</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">file</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">name</span></span> <span class="token string">"Path to main main entry point"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">dataType</span></span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span><span class="token local-name">iri</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">path</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">location</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">name</span></span> <span class="token string">"Location to root of JS program"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">dataType</span></span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span><span class="token local-name">string</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">path</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">function</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">name</span></span> <span class="token string">"Name of the JS function to execute"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">class</span></span> <span class="token function"><span class="token prefix">fno<span class="token punctuation">:</span></span><span class="token local-name">Mapping</span></span><span class="token punctuation">;</span> 
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">path</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">mapping</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">name</span></span> <span class="token string">"Mapping for the function arguments"</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span></code>`;return{c(){f=o("h1"),h=o("a"),b=o("span"),R=e("Intro to runners"),H=x(),v=o("p"),X=e("In the connector architecture, the runner is probably the most important part. The runner takes in a pipeline configuration and interprets this into its own domain, and then executes the meaning of the pipeline (as best as it can)."),J=x(),E=o("p"),U=e("Each runner has an associated processor type, which can be instantiated by processor configs. This associated processor type can specify domain-specific requirements to which the processor config has to conform. These can be seen as required fields. These associated processor types also specify what channels they support (or that the runner supports when starting these processors)."),M=x(),j=o("p"),z=e("To promote reuse and create an ecosystem of processors, it is expected that the runner tries to do a lot of heavy lifting and makes it easy to create processors that are run with that runner. For example, the js-runner starts up the channels before actually executing the function, this way, one processor is as easy as a single function. It also does not slouch on performance by supporting javascript specific in-memory channels."),N=x(),d=o("h2"),m=o("a"),T=o("span"),B=e("Example js-runner"),O=x(),_=o("p"),G=e("Letâ€™s take a look at one of the first runners to exist, the javascript runner."),L=x(),i=o("p"),K=e("This runner specifies some required fields like "),P=o("code"),Q=e("file"),V=e(", "),C=o("code"),W=e("function"),Y=e(", "),q=o("code"),Z=e("location"),$=e(", and "),I=o("code"),nn=e("mapping"),sn=e(". This runner also specifies its own namespace as "),S=o("code"),an=e("https://w3id.org/conn/js#"),tn=e(". This gives the js-runner enough information to accurately start a javascript function with the expected parameters. Note the reuse of "),D=o("code"),en=e("fno:Mapping"),pn=e(", but this is not required."),A=x(),g=o("p"),on=e("Here is the corresponding config for the jsProcessor."),F=x(),w=o("pre"),this.h()},l(n){f=c(n,"H1",{id:!0});var t=l(f);h=c(t,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rn=l(h);b=c(rn,"SPAN",{class:!0}),l(b).forEach(s),rn.forEach(s),R=p(t,"Intro to runners"),t.forEach(s),H=y(n),v=c(n,"P",{});var un=l(v);X=p(un,"In the connector architecture, the runner is probably the most important part. The runner takes in a pipeline configuration and interprets this into its own domain, and then executes the meaning of the pipeline (as best as it can)."),un.forEach(s),J=y(n),E=c(n,"P",{});var kn=l(E);U=p(kn,"Each runner has an associated processor type, which can be instantiated by processor configs. This associated processor type can specify domain-specific requirements to which the processor config has to conform. These can be seen as required fields. These associated processor types also specify what channels they support (or that the runner supports when starting these processors)."),kn.forEach(s),M=y(n),j=c(n,"P",{});var fn=l(j);z=p(fn,"To promote reuse and create an ecosystem of processors, it is expected that the runner tries to do a lot of heavy lifting and makes it easy to create processors that are run with that runner. For example, the js-runner starts up the channels before actually executing the function, this way, one processor is as easy as a single function. It also does not slouch on performance by supporting javascript specific in-memory channels."),fn.forEach(s),N=y(n),d=c(n,"H2",{id:!0});var cn=l(d);m=c(cn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hn=l(m);T=c(hn,"SPAN",{class:!0}),l(T).forEach(s),hn.forEach(s),B=p(cn,"Example js-runner"),cn.forEach(s),O=y(n),_=c(n,"P",{});var dn=l(_);G=p(dn,"Letâ€™s take a look at one of the first runners to exist, the javascript runner."),dn.forEach(s),L=y(n),i=c(n,"P",{});var u=l(i);K=p(u,"This runner specifies some required fields like "),P=c(u,"CODE",{});var mn=l(P);Q=p(mn,"file"),mn.forEach(s),V=p(u,", "),C=c(u,"CODE",{});var xn=l(C);W=p(xn,"function"),xn.forEach(s),Y=p(u,", "),q=c(u,"CODE",{});var yn=l(q);Z=p(yn,"location"),yn.forEach(s),$=p(u,", and "),I=c(u,"CODE",{});var wn=l(I);nn=p(wn,"mapping"),wn.forEach(s),sn=p(u,". This runner also specifies its own namespace as "),S=c(u,"CODE",{});var vn=l(S);an=p(vn,"https://w3id.org/conn/js#"),vn.forEach(s),tn=p(u,". This gives the js-runner enough information to accurately start a javascript function with the expected parameters. Note the reuse of "),D=c(u,"CODE",{});var En=l(D);en=p(En,"fno:Mapping"),En.forEach(s),pn=p(u,", but this is not required."),u.forEach(s),A=y(n),g=c(n,"P",{});var jn=l(g);on=p(jn,"Here is the corresponding config for the jsProcessor."),jn.forEach(s),F=y(n),w=c(n,"PRE",{class:!0});var bn=l(w);bn.forEach(s),this.h()},h(){k(b,"class","icon icon-link"),k(h,"aria-hidden","true"),k(h,"tabindex","-1"),k(h,"href","#intro-to-runners"),k(f,"id","intro-to-runners"),k(T,"class","icon icon-link"),k(m,"aria-hidden","true"),k(m,"tabindex","-1"),k(m,"href","#example-js-runner"),k(d,"id","example-js-runner"),k(w,"class","language-turtle")},m(n,t){r(n,f,t),a(f,h),a(h,b),a(f,R),r(n,H,t),r(n,v,t),a(v,X),r(n,J,t),r(n,E,t),a(E,U),r(n,M,t),r(n,j,t),a(j,z),r(n,N,t),r(n,d,t),a(d,m),a(m,T),a(d,B),r(n,O,t),r(n,_,t),a(_,G),r(n,L,t),r(n,i,t),a(i,K),a(i,P),a(P,Q),a(i,V),a(i,C),a(C,W),a(i,Y),a(i,q),a(q,Z),a(i,$),a(i,I),a(I,nn),a(i,sn),a(i,S),a(S,an),a(i,tn),a(i,D),a(D,en),a(i,pn),r(n,A,t),r(n,g,t),a(g,on),r(n,F,t),r(n,w,t),w.innerHTML=gn},p:ln,i:ln,o:ln,d(n){n&&s(f),n&&s(H),n&&s(v),n&&s(J),n&&s(E),n&&s(M),n&&s(j),n&&s(N),n&&s(d),n&&s(O),n&&s(_),n&&s(L),n&&s(i),n&&s(A),n&&s(g),n&&s(F),n&&s(w)}}}const Sn={toc:{index:null,endIndex:null,map:{type:"list",ordered:!1,spread:!0,children:[{type:"listItem",spread:!0,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#intro-to-runners",children:[{type:"text",value:"Intro to runners"}]}]},{type:"list",ordered:!1,spread:!1,children:[{type:"listItem",spread:!1,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#example-js-runner",children:[{type:"text",value:"Example js-runner"}]}]}]}]}]}]}}};class Dn extends Tn{constructor(f){super(),Pn(this,f,null,qn,Cn,{})}}export{Dn as default,Sn as metadata};
