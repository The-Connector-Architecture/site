import{S as Q,i as R,s as V,k as r,q as n,a as A,l as d,m as c,h as t,r as l,c as W,n as m,b as h,X as i,U as O}from"./index.f02f8fef.js";function Y(J){let o,p,w,T,b,g,P,_,v,B,x,s,N,u,q,C,S,I,K,E,f,L,k,H,M;return{c(){o=r("h1"),p=r("a"),w=r("span"),T=n("Why is configure everything in linked data?"),b=A(),g=r("p"),P=n("The power of linked data shines with the connector architecture. All configuration consists of multiple steps: the high level runner configs, the high level processor configs, and the ultimate pipeline configs."),_=A(),v=r("p"),B=n("Keeping close to linked data for all configurations makes it possible to validate a lot of things. Shape validation with shacl, but also domain specific validation, like checking if two connected processors use a channel that is supported by both runners. (Both still to do)."),x=A(),s=r("p"),N=n("An added benefit comes to life when we add "),u=r("a"),q=n("SDS"),C=n(" into the picture. SDS describes how a smart data stream came into existence, this is closely related to running a pipeline. Transforming a live dataset "),S=r("em"),I=n("is"),K=n(" a smart data stream, and should be accompanied by a SDS description. Well by starting from a linked data pipeline configuration, deriving a SDS description is trivial. (This is still todo though)."),E=A(),f=r("p"),L=n("Note to validate if a pipeline configuration is valid, we actually need all layers of configuration. But we do not want to keep writing the same things in all configuration files. Let’s use "),k=r("code"),H=n("owl:imports"),M=n(" and reuse that predicate (configuration files are similar to ontologies)."),this.h()},l(e){o=d(e,"H1",{id:!0});var a=c(o);p=d(a,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var U=c(p);w=d(U,"SPAN",{class:!0}),c(w).forEach(t),U.forEach(t),T=l(a,"Why is configure everything in linked data?"),a.forEach(t),b=W(e),g=d(e,"P",{});var X=c(g);P=l(X,"The power of linked data shines with the connector architecture. All configuration consists of multiple steps: the high level runner configs, the high level processor configs, and the ultimate pipeline configs."),X.forEach(t),_=W(e),v=d(e,"P",{});var j=c(v);B=l(j,"Keeping close to linked data for all configurations makes it possible to validate a lot of things. Shape validation with shacl, but also domain specific validation, like checking if two connected processors use a channel that is supported by both runners. (Both still to do)."),j.forEach(t),x=W(e),s=d(e,"P",{});var y=c(s);N=l(y,"An added benefit comes to life when we add "),u=d(y,"A",{href:!0,rel:!0});var z=c(u);q=l(z,"SDS"),z.forEach(t),C=l(y," into the picture. SDS describes how a smart data stream came into existence, this is closely related to running a pipeline. Transforming a live dataset "),S=d(y,"EM",{});var F=c(S);I=l(F,"is"),F.forEach(t),K=l(y," a smart data stream, and should be accompanied by a SDS description. Well by starting from a linked data pipeline configuration, deriving a SDS description is trivial. (This is still todo though)."),y.forEach(t),E=W(e),f=d(e,"P",{});var D=c(f);L=l(D,"Note to validate if a pipeline configuration is valid, we actually need all layers of configuration. But we do not want to keep writing the same things in all configuration files. Let’s use "),k=d(D,"CODE",{});var G=c(k);H=l(G,"owl:imports"),G.forEach(t),M=l(D," and reuse that predicate (configuration files are similar to ontologies)."),D.forEach(t),this.h()},h(){m(w,"class","icon icon-link"),m(p,"aria-hidden","true"),m(p,"tabindex","-1"),m(p,"href","#why-is-configure-everything-in-linked-data"),m(o,"id","why-is-configure-everything-in-linked-data"),m(u,"href","https://treecg.github.io/SmartDataStreams-Spec/"),m(u,"rel","nofollow")},m(e,a){h(e,o,a),i(o,p),i(p,w),i(o,T),h(e,b,a),h(e,g,a),i(g,P),h(e,_,a),h(e,v,a),i(v,B),h(e,x,a),h(e,s,a),i(s,N),i(s,u),i(u,q),i(s,C),i(s,S),i(S,I),i(s,K),h(e,E,a),h(e,f,a),i(f,L),i(f,k),i(k,H),i(f,M)},p:O,i:O,o:O,d(e){e&&t(o),e&&t(b),e&&t(g),e&&t(_),e&&t(v),e&&t(x),e&&t(s),e&&t(E),e&&t(f)}}}const $={title:"Why is this a title",toc:{index:null,endIndex:null,map:{type:"list",ordered:!1,spread:!1,children:[{type:"listItem",spread:!1,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#why-is-configure-everything-in-linked-data",children:[{type:"text",value:"Why is configure everything in linked data?"}]}]}]}]}}};class ee extends Q{constructor(o){super(),R(this,o,null,Y,V,{})}}export{ee as default,$ as metadata};
