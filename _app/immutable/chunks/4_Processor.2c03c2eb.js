import{S as as,i as ts,s as es,k as t,q as i,a as T,l as e,m as p,h as n,r,c as I,n as o,b as k,X as a,U as F}from"./index.4fabcb1b.js";function ps($){let u,f,_,M,b,y,H,A,j,C,q,h,x,d,E,D,l,J,g,N,R,v,L,O,P,X,U,S,w,ss=`<code class="language-turtle"><span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/conn/js#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">fno<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/function/ontology#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">fnom<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/function/vocabulary/mapping#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>http://www.w3.org/2001/XMLSchema#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix"><span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>https://w3id.org/conn#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>
<span class="token keyword">@prefix</span> <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span></span> <span class="token url"><span class="token punctuation">&lt;</span>http://www.w3.org/ns/shacl#<span class="token punctuation">></span></span> <span class="token punctuation">.</span>

<span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">Print</span></span> <span class="token keyword">a</span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">JsProcess</span></span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">file</span></span> <span class="token string">"./example.js"</span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">function</span></span> <span class="token string">"print"</span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">location</span></span> <span class="token url"><span class="token punctuation">&lt;</span>./<span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">mapping</span></span> <span class="token punctuation">[</span>
    <span class="token keyword">a</span> <span class="token function"><span class="token prefix">fno<span class="token punctuation">:</span></span><span class="token local-name">Mapping</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">fno<span class="token punctuation">:</span></span><span class="token local-name">parameterMapping</span></span> <span class="token punctuation">[</span>
      <span class="token keyword">a</span> <span class="token function"><span class="token prefix">fnom<span class="token punctuation">:</span></span><span class="token local-name">PositionParameterMapping</span></span> <span class="token punctuation">;</span>
      <span class="token function"><span class="token prefix">fnom<span class="token punctuation">:</span></span><span class="token local-name">functionParameter</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">message</span></span> <span class="token punctuation">;</span>
      <span class="token function"><span class="token prefix">fnom<span class="token punctuation">:</span></span><span class="token local-name">implementationParameterPosition</span></span> <span class="token string">"0"</span><span class="token punctuation">^^</span><span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span><span class="token local-name">int</span></span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span>

<span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">PrintShape</span></span> <span class="token keyword">a</span> <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">NodeShape</span></span><span class="token punctuation">;</span>      <span class="token comment"># Shacl shape for validation</span>
  <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">targetClass</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">Print</span></span><span class="token punctuation">;</span>
  <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">property</span></span> <span class="token punctuation">[</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">datatype</span></span> <span class="token function"><span class="token prefix">xsd<span class="token punctuation">:</span></span><span class="token local-name">string</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">path</span></span> <span class="token function"><span class="token prefix">js<span class="token punctuation">:</span></span><span class="token local-name">message</span></span><span class="token punctuation">;</span>
    <span class="token function"><span class="token prefix">sh<span class="token punctuation">:</span></span><span class="token local-name">name</span></span> <span class="token string">"Message to print"</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span></code>`;return{c(){u=t("h1"),f=t("a"),_=t("span"),M=i("Intro to the processor"),b=T(),y=t("p"),H=i("A processor is a step that can be executed inside a pipeline. This is often a data transformation because the connector architecture focuses on channels with live data. A processor can be in any programming language, as long as there exists an appropriate runner for it."),A=T(),j=t("p"),C=i("A processor is only useful in a pipeline when it is accompanied by its high level configuration. This configuration tells the runner the required fields and also announces what fields are required to instantiate this processor."),q=T(),h=t("aside"),x=t("h2"),d=t("a"),E=t("span"),D=i("Example js-processor"),l=t("p"),J=i("Here a js-processor is defined, based on the js-runner example "),g=t("a"),N=i("here"),R=i(". The configuration is quite easy to follow, there is a processor called "),v=t("code"),L=i("js:Print"),O=i(" that is a "),P=t("code"),X=i("js:JsProcess"),U=i(" and requires one argument, the message to print."),S=T(),w=t("pre"),this.h()},l(s){u=e(s,"H1",{id:!0});var c=p(u);f=e(c,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var G=p(f);_=e(G,"SPAN",{class:!0}),p(_).forEach(n),G.forEach(n),M=r(c,"Intro to the processor"),c.forEach(n),b=I(s),y=e(s,"P",{});var K=p(y);H=r(K,"A processor is a step that can be executed inside a pipeline. This is often a data transformation because the connector architecture focuses on channels with live data. A processor can be in any programming language, as long as there exists an appropriate runner for it."),K.forEach(n),A=I(s),j=e(s,"P",{});var Q=p(j);C=r(Q,"A processor is only useful in a pipeline when it is accompanied by its high level configuration. This configuration tells the runner the required fields and also announces what fields are required to instantiate this processor."),Q.forEach(n),q=I(s),h=e(s,"ASIDE",{class:!0});var z=p(h);x=e(z,"H2",{id:!0});var B=p(x);d=e(B,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var V=p(d);E=e(V,"SPAN",{class:!0}),p(E).forEach(n),V.forEach(n),D=r(B,"Example js-processor"),B.forEach(n),l=e(z,"P",{});var m=p(l);J=r(m,"Here a js-processor is defined, based on the js-runner example "),g=e(m,"A",{href:!0,rel:!0});var W=p(g);N=r(W,"here"),W.forEach(n),R=r(m,". The configuration is quite easy to follow, there is a processor called "),v=e(m,"CODE",{});var Y=p(v);L=r(Y,"js:Print"),Y.forEach(n),O=r(m," that is a "),P=e(m,"CODE",{});var Z=p(P);X=r(Z,"js:JsProcess"),Z.forEach(n),U=r(m," and requires one argument, the message to print."),m.forEach(n),z.forEach(n),S=I(s),w=e(s,"PRE",{class:!0});var ns=p(w);ns.forEach(n),this.h()},h(){o(_,"class","icon icon-link"),o(f,"aria-hidden","true"),o(f,"tabindex","-1"),o(f,"href","#intro-to-the-processor"),o(u,"id","intro-to-the-processor"),o(E,"class","icon icon-link"),o(d,"aria-hidden","true"),o(d,"tabindex","-1"),o(d,"href","#example-js-processor"),o(x,"id","example-js-processor"),o(g,"href","https://github.com/TREEcg/connector-architecture/wiki/Runner"),o(g,"rel","nofollow"),o(h,"class","class-one class-two"),o(w,"class","language-turtle")},m(s,c){k(s,u,c),a(u,f),a(f,_),a(u,M),k(s,b,c),k(s,y,c),a(y,H),k(s,A,c),k(s,j,c),a(j,C),k(s,q,c),k(s,h,c),a(h,x),a(x,d),a(d,E),a(x,D),a(h,l),a(l,J),a(l,g),a(g,N),a(l,R),a(l,v),a(v,L),a(l,O),a(l,P),a(P,X),a(l,U),k(s,S,c),k(s,w,c),w.innerHTML=ss},p:F,i:F,o:F,d(s){s&&n(u),s&&n(b),s&&n(y),s&&n(A),s&&n(j),s&&n(q),s&&n(h),s&&n(S),s&&n(w)}}}const cs={toc:{index:null,endIndex:null,map:{type:"list",ordered:!1,spread:!1,children:[{type:"listItem",spread:!1,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#intro-to-the-processor",children:[{type:"text",value:"Intro to the processor"}]}]}]}]}}};class ls extends as{constructor(u){super(),ts(this,u,null,ps,es,{})}}export{ls as default,cs as metadata};
