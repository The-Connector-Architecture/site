import{S as U,i as V,s as X,e as r,t as n,a as A,c as d,b as c,f as t,d as l,g as W,v as m,h,j as i,n as M}from"./index.32e53c61.js";function Y(R){let o,p,w,T,k,g,P,_,v,B,x,s,N,u,C,I,S,K,L,E,f,j,b,q,H;return{c(){o=r("h1"),p=r("a"),w=r("span"),T=n("Why is configure everything in linked data?"),k=A(),g=r("p"),P=n("The power of linked data shines with the connector architecture. All configuration consists of multiple steps: the high level runner configs, the high level processor configs, and the ultimate pipeline configs."),_=A(),v=r("p"),B=n("Keeping close to linked data for all configurations makes it possible to validate a lot of things. Shape validation with shacl, but also domain specific validation, like checking if two connected processors use a channel that is supported by both runners. (Both still to do)."),x=A(),s=r("p"),N=n("An added benefit comes to life when we add "),u=r("a"),C=n("SDS"),I=n(" into the picture. SDS describes how a smart data stream came into existence, this is closely related to running a pipeline. Transforming a live dataset "),S=r("em"),K=n("is"),L=n(" a smart data stream, and should be accompanied by a SDS description. Well by starting from a linked data pipeline configuration, deriving a SDS description is trivial. (This is still todo though)."),E=A(),f=r("p"),j=n("Note to validate if a pipeline configuration is valid, we actually need all layers of configuration. But we do not want to keep writing the same things in all configuration files. Let’s use "),b=r("code"),q=n("owl:imports"),H=n(" and reuse that predicate (configuration files are similar to ontologies)."),this.h()},l(e){o=d(e,"H1",{id:!0});var a=c(o);p=d(a,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var O=c(p);w=d(O,"SPAN",{class:!0}),c(w).forEach(t),O.forEach(t),T=l(a,"Why is configure everything in linked data?"),a.forEach(t),k=W(e),g=d(e,"P",{});var z=c(g);P=l(z,"The power of linked data shines with the connector architecture. All configuration consists of multiple steps: the high level runner configs, the high level processor configs, and the ultimate pipeline configs."),z.forEach(t),_=W(e),v=d(e,"P",{});var F=c(v);B=l(F,"Keeping close to linked data for all configurations makes it possible to validate a lot of things. Shape validation with shacl, but also domain specific validation, like checking if two connected processors use a channel that is supported by both runners. (Both still to do)."),F.forEach(t),x=W(e),s=d(e,"P",{});var y=c(s);N=l(y,"An added benefit comes to life when we add "),u=d(y,"A",{href:!0,rel:!0});var G=c(u);C=l(G,"SDS"),G.forEach(t),I=l(y," into the picture. SDS describes how a smart data stream came into existence, this is closely related to running a pipeline. Transforming a live dataset "),S=d(y,"EM",{});var J=c(S);K=l(J,"is"),J.forEach(t),L=l(y," a smart data stream, and should be accompanied by a SDS description. Well by starting from a linked data pipeline configuration, deriving a SDS description is trivial. (This is still todo though)."),y.forEach(t),E=W(e),f=d(e,"P",{});var D=c(f);j=l(D,"Note to validate if a pipeline configuration is valid, we actually need all layers of configuration. But we do not want to keep writing the same things in all configuration files. Let’s use "),b=d(D,"CODE",{});var Q=c(b);q=l(Q,"owl:imports"),Q.forEach(t),H=l(D," and reuse that predicate (configuration files are similar to ontologies)."),D.forEach(t),this.h()},h(){m(w,"class","icon icon-link"),m(p,"aria-hidden","true"),m(p,"tabindex","-1"),m(p,"href","#why-is-configure-everything-in-linked-data"),m(o,"id","why-is-configure-everything-in-linked-data"),m(u,"href","https://treecg.github.io/SmartDataStreams-Spec/"),m(u,"rel","nofollow")},m(e,a){h(e,o,a),i(o,p),i(p,w),i(o,T),h(e,k,a),h(e,g,a),i(g,P),h(e,_,a),h(e,v,a),i(v,B),h(e,x,a),h(e,s,a),i(s,N),i(s,u),i(u,C),i(s,I),i(s,S),i(S,K),i(s,L),h(e,E,a),h(e,f,a),i(f,j),i(f,b),i(b,q),i(f,H)},p:M,i:M,o:M,d(e){e&&t(o),e&&t(k),e&&t(g),e&&t(_),e&&t(v),e&&t(x),e&&t(s),e&&t(E),e&&t(f)}}}const $={title:"Why is this a title",toc:{index:null,endIndex:null,map:{type:"list",ordered:!1,spread:!1,children:[{type:"listItem",spread:!1,children:[{type:"paragraph",children:[{type:"link",title:null,url:"#why-is-configure-everything-in-linked-data",children:[{type:"text",value:"Why is configure everything in linked data?"}]}]}]}]}}};class ee extends U{constructor(o){super(),V(this,o,null,Y,X,{})}}export{ee as default,$ as metadata};
